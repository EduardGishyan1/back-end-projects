Movie Rental API
A simple Movie Rental API built with FastAPI. This API allows users to register, login, manage movies, and manage rental history. It includes authentication using JWT tokens, a PostgreSQL database, and basic CRUD operations.

Table of Contents
Installation
Environment Variables
Endpoints
Project Structure
Run the Application
Testing the API
Contributing
Installation
Clone the repository:


git clone https://github.com/your-username/movie-rental-api.git
cd movie-rental-api
Create a virtual environment:


python3 -m venv venv
Activate the virtual environment:

Linux/MacOS:

source venv/bin/activate

Windows:

venv\Scripts\activate


Install dependencies:

pip install -r requirements.txt
Set up the environment variables:

Copy the .env.example file to .env:

cp .env.example .env
Update the .env file with your database credentials and other configurations:
ini

PORT=3001
HOST=127.0.0.1
SECRET_KEY=your_secret_key
HASHING_ALGORITHM=HS256
EXPIRES_IN=3600
DATABASE_URL=postgresql://username:password@localhost:5432/dbname
Environment Variables
The application requires the following environment variables to run:

PORT: Port on which the application will run (default: 3001)
HOST: Host where the server will be hosted (default: 127.0.0.1)
SECRET_KEY: Secret key for signing JWT tokens
HASHING_ALGORITHM: Algorithm used for hashing passwords (default: HS256)
EXPIRES_IN: Expiration time of the JWT token in seconds (default: 3600)
DATABASE_URL: The connection URL for your PostgreSQL database
Endpoints
Authentication
POST /auth/register: Register a new user

Request Body:
json

{
  "username": "string",
  "password": "string",
  "email": "string"
}
POST /auth/login: Login a user and return a JWT token

Request Body:
json

{
  "username": "string",
  "password": "string"
}
Response:
json

{
  "access_token": "jwt_token",
  "token_type": "bearer"
}
Movies
GET /movies: Retrieve a list of all movies

POST /movies: Add a new movie (requires authentication)

Request Body:
json

{
  "title": "string",
  "genre": "string",
  "rating": float
}
Rentals
GET /rentals: Retrieve rental history for the authenticated user

POST /rentals: Rent a movie (requires authentication)

Request Body:
json
{
  "movie_id": int,
  "rental_duration": float
}
Project Structure
plaintext
project/
├── main.py                # Main FastAPI application entry point
├── routers/               # API routers for different resources
│   ├── __init__.py        # Initialize the routers as Python packages
│   ├── auth.py            # Authentication routes (register, login)
│   ├── movies.py          # Movie management routes
│   └── rentals.py         # Rental management routes
├── models/                # Pydantic schemas
│   ├── __init__.py        # Initialize models as Python packages
│   ├── schemas.py         # Pydantic schemas for requests and responses
├── utils/                 # Helper functions like JWT token handling
│   ├── __init__.py        # Initialize utils as Python packages
│   ├── auth_utils.py      # Functions to create/verify JWT tokens
├── config.py              # Centralized configuration
├── .env                   # Environment variables file
├── requirements.txt       # Python dependencies
├── db_commands.py         # SQL queries
Run the Application
To start the application, run the following command:

bash
uvicorn main:app --reload
The server will start on the port specified in the .env file (default: 3001). You can access the API at http://127.0.0.1:3001.

Testing the API
You can test the API using tools like Postman or curl.

Example Requests
Register a new user:

Endpoint: POST /auth/register
Body:
json
{
  "username": "johndoe",
  "password": "securepassword",
  "email": "john.doe@example.com"
}
Login with a user:

Endpoint: POST /auth/login

Body:

json
{
  "username": "johndoe",
  "password": "securepassword"
}
Response:

json
{
  "access_token": "your_jwt_token",
  "token_type": "bearer"
}
Get all movies:

Endpoint: GET /movies
Add a new movie (requires authentication):

Endpoint: POST /movies
Body:
json
{
  "title": "Inception",
  "genre": "Sci-Fi",
  "rating": 8.8
}
Get rental history (requires authentication):

Endpoint: GET /rentals
Rent a movie (requires authentication):

Endpoint: POST /rentals
Body:
json
{
  "movie_id": 1,
  "rental_duration": 3.5
}
Contributing
If you'd like to contribute to this project:

Fork the repository.
Create a new branch.
Make your changes.
Commit your changes.
Push your changes to your fork.
Create a pull request.
License
This project is licensed under the MIT License.